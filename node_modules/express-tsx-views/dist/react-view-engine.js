"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reactViews = exports.addReactContext = exports.setupReactViews = exports.isTranspiled = void 0;
const handler_1 = require("./handler");
const prettify_render_middleware_1 = require("./handler/middleware/prettify-render.middleware");
function isTranspiled() {
    var _a, _b, _c;
    return (_c = (_b = (_a = require.main) === null || _a === void 0 ? void 0 : _a.filename) === null || _b === void 0 ? void 0 : _b.endsWith('.js')) !== null && _c !== void 0 ? _c : true;
}
exports.isTranspiled = isTranspiled;
function setupReactViews(app, options) {
    if (!options.viewsDirectory) {
        throw new Error('viewsDirectory missing');
    }
    const extension = isTranspiled() ? 'js' : 'tsx';
    // eslint-disable-next-line @typescript-eslint/no-misused-promises
    app.engine(extension, reactViews(options));
    app.set('view engine', extension);
    app.set('views', options.viewsDirectory);
}
exports.setupReactViews = setupReactViews;
function addReactContext(res, context, value) {
    var _a;
    const locals = res.locals;
    (_a = locals.contexts) !== null && _a !== void 0 ? _a : (locals.contexts = []);
    locals.contexts.unshift([context, value]);
}
exports.addReactContext = addReactContext;
function reactViews(reactViewOptions) {
    // eslint-disable-next-line complexity, sonarjs/cognitive-complexity
    return async function renderFile(...[filename, options, next]) {
        var _a, _b, _c;
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { settings, _locals, cache, contexts, ...vars } = options;
        try {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access
            const Component = (await Promise.resolve().then(() => __importStar(require(filename)))).default;
            if (!Component) {
                throw new Error(`Module ${filename} does not have a default export`);
            }
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            let context = new handler_1.TsxRenderContext(Component, vars);
            const defaultRenderer = new handler_1.DefaultTsxRenderMiddleware();
            const middlewares = (_a = reactViewOptions.middlewares) !== null && _a !== void 0 ? _a : [];
            contexts === null || contexts === void 0 ? void 0 : contexts.forEach(([Context, props]) => {
                middlewares.push(new handler_1.CreateReactContextRenderMiddleware(Context, props));
            });
            if ((_b = reactViewOptions.prettify) !== null && _b !== void 0 ? _b : false) {
                middlewares.push(new prettify_render_middleware_1.PrettifyRenderMiddleware());
            }
            // eslint-disable-next-line sonarjs/no-ignored-return, unicorn/no-array-reduce
            middlewares.reduce((prev, next) => {
                prev.setNext(next);
                return next;
            }, defaultRenderer);
            context = defaultRenderer.createElement(context);
            if (!context.hasElement()) {
                throw new Error('element was not created');
            }
            context = await defaultRenderer.render(context);
            if (!context.isRendered) {
                throw new Error('element was not rendered');
            }
            const doctype = (_c = reactViewOptions.doctype) !== null && _c !== void 0 ? _c : '<!DOCTYPE html>\n';
            const transform = reactViewOptions.transform || ((html) => html);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            next(null, await transform(doctype + context.html));
        }
        catch (error) {
            next(error);
        }
    };
}
exports.reactViews = reactViews;
//# sourceMappingURL=react-view-engine.js.map